#include <bits/stdc++.h>

using namespace std;
#define INF 99999
const int V=8;

void Dijkstra(int Graph[V][V], int start)
{
    int distance[V], count, index, i, u, m = start+1;
    unsigned long long int s=0, a, b;
    bool visited[V];
    for (i=0; i<V; i++)
    {
        distance[i] = INT_MAX;
        visited[i] = false;
    }
    distance[start]=0;
    for (count=0; count<V-1; count++)
    {
        int min = INT_MAX;
        for (i=0; i<V; i++)
            if (!visited[i] && distance[i] <= min)
            {
                min = distance[i];
                index=i;
            }
        u = index;
        visited[u] = true;
        for (i=0; i<V; i++)
            {if (!visited[i] && Graph[u][i] && distance[u] != INT_MAX && distance[u] + Graph[u][i] < distance[i])
                {
                    a=clock();
                    distance[i] = distance[u] + Graph[u][i];
                    b=clock();
                    s=s+(b-a)/CLOCKS_PER_SEC;
                }
            }
            cout << s << endl;
    }
    for (i=0; i<V; i++)
        if (distance[i] < 100 && i != m)
            cout << distance[i] << "\t";
        else
            cout << "INF" << "\t";
}

int main()
{
    setlocale(LC_ALL, "Rus");
    int start, Graph[V][V]={
                        {0   , 4   , 4   , INF  , INF , INF , INF , INF},
                        {INF , 0   , INF , INF  , INF , INF , INF , INF},
                        {INF , INF , 0   , INF  , 4   , -2  , INF , INF},
                        {3   , INF , 2   , 0    , INF , INF , INF , INF},
                        {INF , INF , INF , 1    , 0   , INF , -2  , INF},
                        {INF , 3   , INF , INF  , -3  , 0   , INF , INF},
                        {INF , INF , INF , INF  , INF , 2   , 0   , 2  },
                        {INF , INF , INF , INF  , -2  , INF , INF , 0  }};
    for (int i=0; i<V; i++)
    {
        cout << endl;
        start = i+1;
        Dijkstra(Graph, start-1);
    }
    return 0;
}
