#include <bits/stdc++.h>

using namespace std;

// Определяем бесконечность как максимальное значение целого числа
#define INF INT_MAX

// Структура данных для хранения ребра Graph
struct Edge
{
    // ребро от `source` к `dest`, имеющее вес, равный `weight`
    int source, dest, weight;
};

bool Bellman_Ford(vector<Edge> const &edges, int source, int n)
{
    // cost[] хранит информацию о кратчайшем пути
    int shortest_distance[n];
    // Изначально все вершины, кроме исходной, весят бесконечность
    fill_n(shortest_distance, n, INF);
    shortest_distance[source] = 0;
    int u, v, w, k = n;
    // Шаг релаксации (выполнить V-1 раз)
    while (--k)
    {
        for (Edge edge: edges)
        {
            // ребро от `u` до `v` с весом `w`
            u = edge.source;
            v = edge.dest;
            w = edge.weight;
            // если стоимость пути к месту назначения `u` можно сократить, взяв преимущество (u, v)
            if (shortest_distance[u] != INF && shortest_distance[u] + w < shortest_distance[v])
            {
                // обновить стоимость до нового меньшего значения
                shortest_distance[v] = shortest_distance[u] + w;
            }
        }
    }
    // Выполнить шаг релаксации еще раз в n-й раз, чтобы проверить циклы с отрицательным весом
    for (Edge edge: edges)
    {
        // ребро от `u` до `v` с весом `w`
        u = edge.source;
        v = edge.dest;
        w = edge.weight;
        // если стоимость пути к месту назначения `u` можно сократить, взяв преимущество (u, v)
        if (shortest_distance[u] != INF && shortest_distance[u] + w < shortest_distance[v]) {
            return true;
        }
    }
    return false;
}

bool Negative_Weight_Cycle(vector<vector<int>> &adjMatrix)
{
    // создаем vector для хранения ребер Graph
    vector<Edge> edges;

    // общее количество узлов в Graph
    int n = adjMatrix.size();

    // базовый вариант
    if (n == 0) {
        return false;
    }

    for (int v = 0; v < n; v++)
    {
        for (int u = 0; u < n; u++)
        {
            if (adjMatrix[v][u] && adjMatrix[v][u] != INF) {
                edges.push_back({v, u, adjMatrix[v][u]});
            }
        }
    }

    // Запускаем алгоритм Беллмана-Форда из каждой вершины как исходной
    // и проверяем цикл с отрицательным весом
    for (int i = 0; i < n; i++) {
        if (Bellman_Ford(edges, i, n)) {
            return true;
        }
    }

    return false;
}

int main()
{
    vector<vector<int>> adjMatrix =
    {
        {0   , 4   , 4   , INF  , INF , INF , INF , INF},
        {INF , 0   , INF , INF  , INF , INF , INF , INF},
        {INF , INF , 0   , INF  , 4   , -2  , INF , INF},
        {3   , INF , 2   , 0    , INF , INF , INF , INF},
        {INF , INF , INF , 1    , 0   , INF , -2  , INF},
        {INF , 3   , INF , INF  , -3  , 0   , INF , INF},
        {INF , INF , INF , INF  , INF , 2   , 0   , 2  },
        {INF , INF , INF , INF  , -2  , INF , INF , 0  }
    };

    bool result = Negative_Weight_Cycle(adjMatrix);
    if (result)
    {
        cout << "Negative-weight cycle found";
    }
    else
    {
        cout << "Negative-weight cycle doesn't exist";
    }

    return 0;
}
